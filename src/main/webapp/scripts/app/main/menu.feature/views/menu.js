// Generated by CoffeeScript 1.8.0
define(['jquery', 'underscore', 'handlebars'], function($, _, H) {
  var parseData, processNode, templates;
  parseData = function(data) {
    var items, result;
    items = {};
    result = [];
    _.each(data, function(item) {
      items[item.id] = item;
      item.children = [];
      if (!item.parent) {
        return result.push(item);
      }
    });
    _.each(data, function(item) {
      if (item.parent) {
        return items[item.parent.id].children.push(item);
      }
    });
    return result;
  };
  templates = {
    leaf: H.compile('<li><a href="{{path}}" id="child-{{id}}" data-id="{{id}}">{{#if iconClass}}<i class="{{iconClass}}"></i>{{/if}}\n    <span class="menu-text">{{name}}</span>\n</a> </li>'),
    branch: H.compile('<li> <a href="javascript:void 0;" class="dropdown-toggle" id="parent-{{id}}">\n    {{#unless isRoot}}<i class="icon-double-angle-right"></i>{{/unless}}\n    {{#if iconClass}}<i class="{{iconClass}}"></i>{{/if}}\n    <span class="menu-text">{{name}}</span><b class="arrow icon-angle-down"></b> </a>\n    <ul class="submenu" {{#opened}}style="display:block;"{{/opened}}>{{{childrenHtml}}}</ul>\n</li>')
  };
  processNode = function(node, isRoot) {
    var htmls, isLeaf;
    isLeaf = node.children.length === 0;
    htmls = [];
    if (!isLeaf) {
      _.each(node.children, function(item) {
        return htmls.push(processNode(item));
      });
      node.childrenHtml = htmls.join('');
    }
    node.isRoot = isRoot;
    return templates[(isLeaf ? 'leaf' : 'branch')](node);
  };
  return {
    events: {
      'click parent-*': 'toggleSubMenu'
    },
    model: 'system/menu/all',
    extend: {
      serializeData: function(su) {
        var c, data, deferred, me;
        deferred = $.Deferred();
        c = this.collection;
        data = su.apply(this);
        me = this;
        c.fetch().done(function() {
          data.items = parseData(c.toJSON());
          return deferred.resolve(data);
        });
        return deferred.promise();
      },
      renderHtml: function(su, data) {
        var htmls;
        htmls = [];
        _.each(data.items, function(item) {
          return htmls.push(processNode(item, true));
        });
        return '<ul class="nav nav-list" id="menu">' + htmls.join('') + '</ul>';
      }
    }
  };
});
